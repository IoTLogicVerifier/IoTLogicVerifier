load ../Iot .
mod SYSTEM is
protecting Iot .
eq init = idle ==> < cloudA | deviceB : ('owner' : nils , 'key' : 'secretOfB') > 
            < deviceB | 'key' : 'secretOfB' > 
            < cloudA | userA : ('device' : nils , 'member' : nils) >
            < cloudA | userC : ('device' : nils , 'member' : nils) >
            < userC | 'localTo' : deviceD , 'know' : nils >
            < userA | 'localTo' : deviceB , 'know' : nils , 'bindStatus' : 'ready' , 'counter' : 0 > .

vars UserX UserY : User .
vars KeyA KeyB Status : Qid .
var DeviceX : Device .
vars ...  ....  SetX SetY : Set .
vars S : Soup .
vars Any Any' : Bool .
vars N N' : Nat .

***device rule
eq  < DeviceX | 'key' : KeyA,... > < UserX | 'localTo' : DeviceX , .... >
    $ UserX 'pressButton' DeviceX 
  = < DeviceX | 'key' : KeyA,... > < UserX | 'localTo' : DeviceX , .... >
    $ DeviceX 'transfer' UserX | KeyA . 

***cloud rule
eq < cloudA | DeviceX : ('owner' : SetX , 'key' : KeyA) >
   < cloudA | UserX : ('device' : SetY , ....) >
   $ UserX 'callAPI:bind' cloudA | (DeviceX ; KeyA) 
 = < cloudA | DeviceX : ('owner' : (UserX , SetX), 'key' : KeyA) > 
   < cloudA | UserX : ('device' : (DeviceX , SetY) , ....) >
   $ cloudA 'respAPI:bind' UserX | true .

eq < cloudA | UserX : ('device' : (DeviceX ,...) , 'member' : SetX) > 
   < cloudA | DeviceX : ('key' : KeyA , ....) >
   $ UserX 'callAPI:invite' cloudA | UserY 
 = < cloudA | UserX : ('device' : (DeviceX ,...) , 'member' : (UserY,SetX)) > 
   < cloudA | DeviceX : ('key' : KeyA , ....) >
   $ cloudA 'respAPI:invite' UserY | KeyA .

eq < cloudA | UserX : ('member' : (UserY,SetX) , ...) > 
   $ UserX 'callAPI:kick' cloudA | UserY 
 = < cloudA | UserX : ('member' : SetX , ...) > 
   $ cloudA 'respAPI:kick' UserY .

*** userA rule
eq < userA | 'bindStatus' : Status ,  ... > $ cloudA 'respAPI:bind' userA | true
 = < userA | 'bindStatus' : 'success' ,  ... > . 

endm
*** key0 key1 key2 key0
mod TRANSITION is
*** more permissive to achieve compeleteness
including SYSTEM .

vars K Status : Qid . 
var Keys : Set .
vars S S' : Soup .
var E : Event .
var Any : Bool .
var N : Nat .
vars ... .... SetX SetY : Set .

***$1: Analyzer input minial nomal user RTE operation sequence 
ops ua1 ua4 ua3 uc1 uc4 uc3 : -> Event .
ops ua2 uc2 : Qid -> Event .
eq ua1 = $ userA 'pressButton' deviceB .
eq ua2(K) = $ userA 'callAPI:bind' cloudA | (deviceB ; K)  .
eq ua3 = $ userA 'callAPI:invite' cloudA | userC .
eq ua4 = $ userA 'callAPI:kick' cloudA | userC .

eq uc1    = $ userC 'pressButton' deviceB .
eq uc2(K) = $ userC 'callAPI:bind' cloudA | (deviceB ; K)  .
eq uc3 = $ userC 'callAPI:invite' cloudA | userA .
eq uc4 = $ userC 'callAPI:kick' cloudA | userA .

*** userA operation rl rule, generate from $1
rl [um1] : 
      E ==> S < userA | 'bindStatus' : 'ready' , 'counter' : N, ... > 
 => ua1 ==> S < userA | 'bindStatus' : 'progress' , 'counter' : (N + 1), ... > ua1 .

rl [um2] : 
    E      ==> S < userA | 'know' : (K,....) , 'bindStatus' : 'progress' , ... >
 => ua2(K) ==> S < userA | 'know' : (K,....) , 'bindStatus' : 'progress' , ... > ua2(K) .

rl [um3] : 
    E   ==> S < userA | 'bindStatus' : 'success' , ... > 
 => ua3 ==> S < userA | 'bindStatus' : 'success' , ... > ua3 .

rl [um4] : 
    E   ==> S < userA | 'bindStatus' : 'success' , ... > < cloudA | userA : ('member' : (userC,SetX),....)>
 => ua4 ==> S < userA | 'bindStatus' : 'success' , ... > < cloudA | userA : ('member' : (userC,SetX),....)> ua4 .


rl [am1] : 
      E ==> S < userC | 'localTo' : deviceB , ... > 
 => uc1 ==> S < userC | 'localTo' : deviceB , ... > uc1 .

rl [am2] : 
     E      ==> S < userC | 'know' : (K , Keys) , ... > 
  => uc2(K) ==> S < userC | 'know' : (K , Keys) , ... > uc2(K) .

rl [am3] : 
     E     ==> S 
 =>  uc3   ==> S uc3 .

rl [am4] : 
     E     ==> S < cloudA | userC : ('member' : (userA,...),....)>
 =>  uc4   ==> S < cloudA | userC : ('member' : (userA,...),....)> uc4 .



rl [ac] : E ==> S < userC | 'localTo' : deviceD , ... > 
   => $ userC 'approaches' deviceB ==> S < userC | 'localTo' : deviceB , ... >  .
rl [al] : E ==> S < userC | 'localTo' : deviceB , ... >  
   => $ userC 'leaves' deviceB ==> S < userC | 'localTo' : deviceD , ... > .

endm


