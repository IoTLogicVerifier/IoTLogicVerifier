load ../../Iot .
mod SYSTEM is
protecting Iot .
***in fact,ticket generate by cloud. device does not hold the ticket.
eq init = idle ==> < cloudA | deviceB : ('owner' : nils) > 
            < deviceB | 'key' : '' , 'counter' : 0 , 'lock' : true > 
            < cloudA | userA : ('device' : nils , 'member' : nils) >
            < cloudA | userC : ('device' : nils , 'member' : nils) >
            < userC | 'localTo' : deviceD , 'know' : nils >
            < userA | 'localTo' : deviceB , 'know' : nils , 'bindStatus' : 'ready' , 'counter' : 0 > .

vars UserX UserY : User .
vars KeyA KeyB Status : Qid .
var DeviceX : Device .
vars ...  ....  SetX SetY : Set .
vars S : Soup .
vars Any Any' : Bool .
vars N N' : Nat .

***device rule
eq  < DeviceX | 'key' : KeyA , 'counter' : N,... > < UserX | 'localTo' : DeviceX , .... >
    < cloudA | DeviceX : ('owner' : SetX) > $ UserX 'pressButton' DeviceX 
  = < DeviceX | 'key' : randomStr(N) , 'counter' : (N + 1) rem 5 ,... > 
    < UserX | 'localTo' : DeviceX , .... >  $ DeviceX 'transfer' UserX | randomStr(N)
    < cloudA | DeviceX : ('owner' : nils) > . ***hardware reset

eq < cloudA | DeviceX : ('owner' : nils) > < cloudA | UserY : ('device' : ((DeviceX : KeyA) , ...)) >
 = < cloudA | UserY : ('device' : ...) >  . *** reset

ceq < DeviceX | 'lock' : true, 'key' : KeyA ,... > < UserX | 'localTo' : DeviceX , .... >
   $ UserX 'callAPI:unlock' DeviceX  | KeyA
  = < DeviceX | 'lock' : false , 'key' : KeyA ,... > if KeyA =/= '' .

ceq < DeviceX | 'lock' : false, 'key' : KeyA ,... > < UserX | 'localTo' : DeviceX , .... >
   $ UserX 'callAPI:lock' DeviceX  | KeyA
  = < DeviceX | 'lock' : true, 'key' : KeyA ,... > if KeyA =/= '' .

ceq < DeviceX | 'lock' : false , 'key' : KeyA ,...  > < UserX | 'localTo' : DeviceX , .... >
   $ UserX 'callAPI:getKey' DeviceX 
 =  < DeviceX | 'lock' : false , 'key' : KeyA ,...  > < UserX | 'localTo' : DeviceX , .... >
   $ DeviceX 'respAPI:getKey' UserX | KeyA  if KeyA =/= '' .

ceq < DeviceX | 'key' : KeyA, ... > < UserX | 'localTo' : DeviceX , .... >
   $ UserX 'callAPI:control' DeviceX  | KeyA
 = < DeviceX | 'key' : KeyA, ... >  < UserX | 'localTo' : DeviceX , .... >
   $ UserX 'respAPI:control' DeviceX  | true if KeyA =/= '' .


***cloud rule
ceq < DeviceX | 'key' : KeyA, ... > < cloudA | DeviceX : ('owner' : SetX) >
   < cloudA | UserX : ('device' : SetY , ....) >
   $ UserX 'callAPI:bind' cloudA | (DeviceX ; KeyA) 
 = < DeviceX | 'key' : KeyA, ... >  < cloudA | DeviceX : ('owner' : (UserX , SetX)) > 
   < cloudA | UserX : ('device' : ((DeviceX : KeyA) , SetY) , ....) >
   $ cloudA 'respAPI:bind' UserX | true if KeyA =/= '' .

ceq < DeviceX | 'key' : KeyA,... > $ UserX 'callAPI:control' cloudA | (DeviceX ; KeyA)
 = < DeviceX | 'key' : KeyA,... > $ cloudA 'respAPI:control' UserX | true if KeyA =/= '' . 

eq < cloudA | UserX : ('device' : ((DeviceX : KeyA) ,...) , 'member' : SetX) > 
   $ UserX 'callAPI:invite' cloudA | UserY 
 = < cloudA | UserX : ('device' : ((DeviceX : KeyA) ,...) , 'member' : (UserY,SetX)) > 
   $ cloudA 'respAPI:invite' UserY | KeyA .

eq < cloudA | UserX : ('member' : (UserY,SetX) , ...) > 
   $ UserX 'callAPI:kick' cloudA | UserY 
 = < cloudA | UserX : ('member' : SetX , ...) > 
   $ cloudA 'respAPI:kick' UserY .

*** userA rule
eq < userA | 'bindStatus' : Status ,  ... > $ cloudA 'respAPI:bind' userA | true
 = < userA | 'bindStatus' : 'success' ,  ... > . 

endm
*** key0 key1 key2 key0
mod TRANSITION is
*** more permissive to achieve compeleteness
including SYSTEM .

vars K Status : Qid . 
var Keys : Set .
vars S S' : Soup .
var E : Event .
var Any : Bool .
var N : Nat .
vars ... .... : Set .

***$1: Analyzer input minial nomal user RTE operation sequence 
ops ua1 ua4 ua3 ua5 uc1 uc4 uc3 uc5 : -> Event .
ops ua2 uc2 uc6 uc7 : Qid -> Event .
eq ua1 = $ userA 'pressButton' deviceB .
eq ua2(K) = $ userA 'callAPI:bind' cloudA | (deviceB ; K)  .
eq ua3 = $ userA 'callAPI:invite' cloudA | userC .
eq ua4 = $ userA 'callAPI:kick' cloudA | userC .
eq ua5 = $ userA 'callAPI:getKey' cloudA | deviceB .

eq uc1    = $ userC 'pressButton' deviceB .
eq uc2(K) = $ userC 'callAPI:bind' cloudA | (deviceB ; K)  .
eq uc3 = $ userC 'callAPI:invite' cloudA | userA .
eq uc4 = $ userC 'callAPI:kick' cloudA | userA .
eq uc5 = $ userC 'callAPI:getKey' cloudA | deviceB .
eq uc6(K)  = $ userC 'callAPI:unlock' deviceB | K .
eq uc7(K)  = $ userC 'callAPI:lock' deviceB | K .

*** userA operation rl rule, generate from $1
rl [um1] : 
      E ==> S < userA | 'bindStatus' : 'ready' , 'counter' : N, ... > 
 => ua1 ==> S < userA | 'bindStatus' : 'progress' , 'counter' : (N + 1), ... > ua1 .

rl [um2] : 
    E      ==> S < userA | 'know' : (K,....) , 'bindStatus' : 'progress' , ... >
 => ua2(K) ==> S < userA | 'know' : (K,....) , 'bindStatus' : 'progress' , ... > ua2(K) .

rl [um3] : 
    E   ==> S < userA | 'bindStatus' : 'success' , ... > 
 => ua3 ==> S < userA | 'bindStatus' : 'success' , ... > ua3 .

rl [um4] : 
    E   ==> S < userA | 'bindStatus' : 'success' , ... > < cloudA | userA : ('member' : (userC,...),....)>
 => ua4 ==> S < userA | 'bindStatus' : 'success' , ... > < cloudA | userA : ('member' : (userC,...),....)> ua4 .


rl [am1] : 
      E ==> S < userC | 'localTo' : deviceB , ... > 
 => uc1 ==> S < userC | 'localTo' : deviceB , ... > uc1 .

rl [am2] : 
     E      ==> S < userC | 'know' : (K , Keys) , ... > 
  => uc2(K) ==> S < userC | 'know' : (K , Keys) , ... > uc2(K) .

rl [am3] : 
     E     ==> S < userC | 'localTo' : deviceB , ... > 
 =>  uc5   ==> S < userC | 'localTo' : deviceB , ... > uc5 .

rl [am4] : 
    E      ==> S < userC | 'localTo' : deviceB , 'know' : (K , Keys) , ... > 
 => uc6(K) ==> S < userC | 'localTo' : deviceB , 'know' : (K , Keys) , ... > uc6(K) .

rl [am5] : 
    E      ==> S < userC | 'localTo' : deviceB , 'know' : (K , Keys) , ... > 
 => uc7(K) ==> S < userC | 'localTo' : deviceB , 'know' : (K , Keys) , ... > uc7(K) .

rl [ac] : E ==> S < userC | 'localTo' : deviceD , ... > 
   => $ userC 'approaches' deviceB ==> S < userC | 'localTo' : deviceB , ... >  .
rl [al] : E ==> S < userC | 'localTo' : deviceB , ... >  
   => $ userC 'leaves' deviceB ==> S < userC | 'localTo' : deviceD , ... > .

endm


