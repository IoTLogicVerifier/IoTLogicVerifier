load ../Iot .
mod SYSTEM is
protecting Iot .
***in fact,ticket generate by cloud. device does not hold the ticket.
eq init = idle ==> < cloudA | deviceB : ( 'owner' : false ) > 
                   < cloudA | 'time' : 0 >
            < deviceB | 'counter' : 0 > 
            < userC | 'localTo' : deviceD , 'know' : nils >
            < userA | 'localTo' : deviceB , 'know' : nils , 'bindStatus' : 'ready' , 'counter' : 0 > .

vars UserX UserY : User .
vars KeyA KeyB Status : Qid .
var DeviceX : Device .
vars ...  ....  SetX SetY : Set .
vars S : Soup .
vars Any Any' : Bool .
vars N N' : Nat .

***device rule
eq  < DeviceX | 'counter' : N > < UserX | 'localTo' : DeviceX , .... >
    $ UserX 'pressButton' DeviceX 
  = < DeviceX | 'counter' : (N + 1) rem 5 > < UserX | 'localTo' : DeviceX , .... > 
    $ DeviceX 'callAPI:setKey' cloudA | randomStr(N)  .

***cloud rule
eq < cloudA | 'time' : N >  $ DeviceX 'callAPI:setKey' cloudA | KeyA 
 = < cloudA | 'time' : N >  < cloudA | 'ticket' , DeviceX , KeyA , N > .

ceq < cloudA | 'time' : N > < cloudA | 'ticket' , DeviceX , KeyA , N' >
    < UserX | 'localTo' : DeviceX , ... > 
    $ UserX 'callAPI:getKey' cloudA | DeviceX
  = < cloudA | 'time' : N > < cloudA | 'ticket' , DeviceX , KeyA , N' >
    < UserX | 'localTo' : DeviceX , ... >
    $ cloudA 'respAPI:getKey' UserX | KeyA if N < N' + 2 .

***bind
ceq < cloudA | DeviceX : ('owner' : false ) > < cloudA | 'time' : N >
    < cloudA | 'ticket' , DeviceX , KeyA , N' >
    $ UserX 'callAPI:bind' cloudA | (DeviceX ; KeyA)
  = < cloudA | DeviceX : ('owner' : UserX) > < cloudA | 'time' : N >
    $ cloudA 'respAPI:bind' UserX | true if N < N' + 3 .

ceq < cloudA | DeviceX : ('owner' : (UserY , ...)) > < cloudA | 'time' : N >
    < cloudA | 'ticket' , DeviceX , KeyA , N' >
    $ UserX 'callAPI:bind' cloudA | (DeviceX ; KeyA)
 = < cloudA | DeviceX : ('owner' : (UserY , ...)) > < cloudA | 'time' : N >
    < cloudA | 'ticket' , DeviceX , KeyA , N' >
    $ cloudA 'respAPI:bind' UserX | ('hasOtherOwner' ; UserY) if N < N' + 3 .

ceq < cloudA | DeviceX : ('owner' : (UserY , ...)) > < cloudA | 'time' : N >
    < cloudA | 'ticket' , DeviceX , KeyA , N' >
    $ UserX 'callAPI:join' cloudA | (UserY ; KeyA)
  = < cloudA | DeviceX : ('owner' : (UserX , UserY , ...)) > < cloudA | 'time' : N >
    $ cloudA 'respAPI:join' UserX | true if N < N' + 3 .
*** ticket expiring
ceq < cloudA | 'time' : N > < cloudA | 'ticket' , DeviceX , KeyA , N' >
 =  < cloudA | 'time' : N >  if N >= N' + 2 .

*** userA rule
eq < userA | 'bindStatus' : Status ,  ... > $ cloudA 'respAPI:bind' userA | true
 = < userA | 'bindStatus' : 'success' ,  ... > . 
ceq < userA | 'bindStatus' : Status , ... > $ cloudA 'respAPI:bind' userA | ('hasOtherOwner' ; UserY)
 = < userA | 'bindStatus' : 'hasOtherOwner' ,  ... > if UserY =/= userA . 

endm
*** key0 key1 key2 key0
mod TRANSITION is
*** more permissive to achieve compeleteness
including SYSTEM .

vars K Status : Qid . 
var Keys : Set .
vars S S' : Soup .
var E : Event .
var Any : Bool .
var N : Nat .
vars ... .... : Attributes .

***$1: Analyzer input minial nomal user RTE operation sequence 
ops ua1 ua2 uc1 uc2 : -> Event .
ops ua3 uc3 uc4 : Qid -> Event .
eq ua1 = $ userA 'pressButton' deviceB .
eq ua2 = $ userA 'callAPI:getKey' cloudA | deviceB .
eq ua3(K) = $ userA 'callAPI:bind' cloudA | (deviceB ; K)  .

eq uc1    = $ userC 'pressButton' deviceB .
eq uc2    = $ userC 'callAPI:getKey' cloudA | deviceB .
eq uc3(K) = $ userC 'callAPI:bind' cloudA | (deviceB ; K)  .
eq uc4(K) = $ userC 'callAPI:join' cloudA | (userA ; K)  .

*** cloudA rl
rl [tp] : 
    E ==> S < cloudA | 'time' : N >
 => timepass ==> S < cloudA | 'time' : (N + 1) > timepass .

*** userA operation rl rule, generate from $1
rl [um1] : 
      E ==> S < userA | 'bindStatus' : 'ready' , 'counter' : N, ... > 
 => ua1 ==> S < userA | 'bindStatus' : 'progress' , 'counter' : (N + 1), ... > ua1 .

rl [um2] : 
    E   ==> S < userA | 'bindStatus' : 'progress' , ... > 
 => ua2 ==> S < userA | 'bindStatus' : 'progress' , ... > ua2 .
rl [um3] : 
    E      ==> S < userA | 'know' : (K,....) , 'bindStatus' : 'progress' , ... >
 => ua3(K) ==> S < userA | 'know' : (K,....) , 'bindStatus' : 'progress' , ... > ua3(K) .

*** userC operations rl rule, generate heuristicly from $2.
rl [am1] : 
      E ==> S < userC | 'localTo' : deviceB , ... > 
 => uc1 ==> S < userC | 'localTo' : deviceB , ... > uc1 .

rl [am2] : 
     E     ==> S < userC | 'localTo' : deviceB , ... > 
 =>  uc2   ==> S < userC | 'localTo' : deviceB , ... > uc2 .

rl [am3] : 
     E      ==> S < userC | 'know' : (K , Keys) , ... > 
  => uc3(K) ==> S < userC | 'know' : (K , Keys) , ... > uc3(K) .

rl [am4] : 
    E      ==> S < userC | 'know' : (K , Keys) , ... > 
 => uc4(K) ==> S < userC | 'know' : (K , Keys) , ... > uc4(K) .

rl [ac] : E ==> S < userC | 'localTo' : deviceD , ... > 
   => $ userC 'approaches' deviceB ==> S < userC | 'localTo' : deviceB , ... >  .
rl [al] : E ==> S < userC | 'localTo' : deviceB , ... >  
   => $ userC 'leaves' deviceB ==> S < userC | 'localTo' : deviceD , ... > .

endm


