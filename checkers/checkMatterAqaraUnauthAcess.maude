load ../cases/MatterAqaraUnauthAcess .
load model-checker .
mod PREDS is
pr TRANSITION * (sort State to State') .
including SATISFACTION .
pr BOOL-OPS .

subsort Vertex < State .
ops um um1 um2 : -> Prop .
ops guestPermission dp1 :  -> Prop .

var Vtx : Vertex .
var P : Prop .
var E : Event .
vars K Status : Qid .
var S : Soup .
var N : Nat .
var D : Device .
var UserX : User .
vars SetX ... : Set .

*** actions
ceq E ==> S |= um1 = true if E = ua1 .
ceq E ==> S |= um2 = true if E = ua2 .
ceq Vtx |= um = true if (Vtx |= um1) or (Vtx |= um2) .

*** status
eq E ==> S < cloudA | userA : ('members' : (userC,SetX) , ...) > |= guestPermission = true .
*** access control
eq E ==> S < deviceB | 'operationStatus' : ('onoff' : true)  > |= dp1 = true . ***suppose all dps are boolean

eq Vtx |= P = false [owise] .

endm

mod CHECK is
pr PREDS .
including MODEL-CHECKER .
ops deviceAnyOperationStatusChanged : -> Prop .
ops danger fairness : -> Prop .
ops spec : -> Prop .

***\/ (~ dp2 /\ O dp2) \/ (dp2 /\ O (~ dp2))
eq deviceAnyOperationStatusChanged = (~ dp1 /\ O dp1) \/ (dp1 /\ O (~ dp1)) . 
eq danger = <> (~ um /\ ((~ guestPermission) /\ O (~ guestPermission)) /\ deviceAnyOperationStatusChanged) .
eq fairness = []((um1 -> O (~ um W um2))
              /\ (um2 -> O ([] ~ um)))
              /\ <> um1 .

eq spec = O ~ (danger /\ fairness) .
endm

load ../postProcess .
